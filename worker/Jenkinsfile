pipeline {
    agent {
        docker{
        image 'maven:3.9.8-sapmachine-21'
        args '-v$HOME/.m2:/root/.m2'
        }
    }
    stages{
        stage('build_worker'){
            when{
                changeset "**/worker/**"
            }
            agent{
                docker{
                    image 'maven:3.9.8-sapmachine-21'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps{
                echo 'building worker app'
                dir('worker'){
                  sh 'mvn compile'
                }
            }
        }
        stage('test_worker'){
            when{
                changeset "**/worker/**"
            }
            agent{
                docker{
                    image 'maven:3.9.8-sapmachine-21'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps{
                echo 'Running unit tests on worker app'
                dir('worker'){
                  sh 'mvn clean test'
                }
            }
        }
        stage('package_worker'){
            when{
                branch 'master'
                changeset "**/worker/**"
            }
            agent{
                docker{
                    image 'maven:3.9.8-sapmachine-21'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps{
                echo 'packaging worker app into a jarfile'
                dir('worker'){
                  sh 'mvn package -DskipTests'
                  archiveArtifacts artifacts: '**/target/*.jar', fingerprint:  true
                }
            }
        }
        stage('docker_package'){
            agent any
            when{
                branch 'master'
                changeset "**/worker/**"
            }
            steps{
                echo 'Packaging worker app with docker'
                script{
                    docker.withRegistry('https://index.docker.io/v1/','Docker_Hub') {
                        def workerImage =
                        docker.build("walterskot/worker:v${env.BUILD_ID}", "./worker")
                            workerImage.push()
                            workerImage.push("${env.BRANCH_NAME}")
                            workerImage.push("latest")
                    }
                }
            }
        }
    }
    post {
        success {
            slackSend (
                channel: '#testing',
                color: 'good',
                message: "✅ Build SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
            )
        }
        failure {
            slackSend (
                channel: '#testing',
                color: 'danger',
                message: "❌ Build FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
            )
        }
    }
}
